<!DOCTYPE html>
<html lang="{{@site.lang}}">
  <head>
    {{!-- Document Settings --}}
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />

    {{!-- Base Meta --}}
    <title>{{meta_title}}</title>
    <meta name="HandheldFriendly" content="True" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />

    {{!-- Styles'n'Scripts --}}
    <style>
      /* This font-face is here to make icons work if the Ghost instance is installed in a subdirectory */
      @font-face {
        font-family: 'icomoon';
        src: url("{{asset 'fonts/icomoon.eot?jcg9f9'}}");
        src: url("{{asset 'fonts/icomoon.eot?jcg9f9#iefix'}}") format('embedded-opentype'),
        url("{{asset 'fonts/icomoon.ttf?jcg9f9'}}") format('truetype'),
        url("{{asset 'fonts/icomoon.woff?jcg9f9'}}") format('woff'),
        url("{{asset 'fonts/icomoon.svg?jcg9f9#icomoon'}}") format('svg');
        font-weight: normal;
        font-style: normal;
        font-display: swap;
      }
    </style>
    <link rel="stylesheet" type="text/css" href="{{asset "css/app.css"}}" media="screen" />

    {{!-- This #block helper will pull data from the hero partial 
    to inject styles of the hero image to make it responsive --}}
    {{{block "herobackground"}}}

    {{!-- This tag outputs SEO meta+structured data and other important settings --}}
    {{ghost_head}}

    {{!-- This variable is used to make the search form work --}}
    <script>
      // @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&dn=expat.txt Expat
      const ghostHost = "{{@site.url}}"
      // @license-end
    </script>

    {{!-- This script loads the Google font asynchronously --}}
    <script>
      // @license magnet:?xt=urn:btih:d3d9a9a6595521f9666a5e94cc830dab83b65699&dn=expat.txt Expat
      //WebFontConfig = {
      //  google: { families: ['Source+Sans+Pro:400,600,700&display=swap'] }
      //};

      (function (d) {
        var wf = d.createElement('script'), s = d.scripts[0];
        wf.src = 'https://ajax.googleapis.com/ajax/libs/webfont/1.6.26/webfont.js';
        wf.async = true;
        s.parentNode.insertBefore(wf, s);
      })(document);
      // @license-end
    </script>
  </head>
  <body class="{{body_class}}">
    {{!-- All the main content gets inserted here, index.hbs, post.hbs, etc --}}
    {{{body}}}
   
    <div id="cookies-eu-banner" class="content-centered">
        <span id="cookies-eu-text">Ta spletna stran uporablja piškotke za interno analitiko.</span>
        <p>
          <a href="/privacy" class="m-button " id="cookies-eu-more">Preberi si več</a>
          <button id="cookies-eu-reject" class="m-button filled">odkloni</button>
          <button id="cookies-eu-accept" class="m-button filled">Se strinjam</button>
        </p>
    </div>

    {{!-- Search form --}}
    {{> search}}

    {{!-- The footer --}}
    {{> footer}}

    {{!-- Notifications alerts --}}
    {{> "notifications"}}

    {{!-- Common scripts shared between pages --}}
    <script crossorigin="anonymous" src="https://polyfill.io/v3/polyfill.min.js?features=IntersectionObserver%2CPromise%2CArray.prototype.includes%2CString.prototype.endsWith%2CString.prototype.startsWith%2CObject.assign%2CNodeList.prototype.forEach"></script>
    <script defer src="https://unpkg.com/@tryghost/content-api@1.2.7/umd/content-api.min.js"></script>
    <script defer src="{{asset "js/manifest.js"}}"></script>
    <script defer src="{{asset "js/vendor.js"}}"></script>
    <script defer src="{{asset "js/app.js"}}"></script>

    {{!-- The #block helper will pull in data from the #contentFor other template files --}}
    {{{block "scripts"}}}

    {{!-- Ghost outputs important scripts and data with this tag --}}
    {{ghost_foot}}
    
    <script async src="https://www.googletagmanager.com/gtag/js?id=UA-149255108-1"></script>
    <script>
    ; // jshint ignore:line
      (function (root, factory, undefined) {
        'use strict';
        if (typeof define === 'function' && define.amd) {
          define([], factory);
        } else if (typeof exports === 'object') {
          module.exports = factory();
        } else {
          // root is window
          root.CookiesEuBanner = factory();
        }
      }(window, function () {
        'use strict';

        var CookiesEuBanner,
          document = window.document;
        CookiesEuBanner = function (launchFunction, waitAccept, useLocalStorage, undefined) {
          if (!(this instanceof CookiesEuBanner)) {
            return new CookiesEuBanner(launchFunction);
          }
          this.cookieTimeout = 33696000000; // 13 months in milliseconds
          this.bots = /bot|crawler|spider|crawling/i;
          this.cookieName = 'hasConsent';
          this.trackingCookiesNames = ['__utma', '__utmb', '__utmc', '__utmt', '__utmv', '__utmz', '_ga', '_gat', '_gid'];
          this.launchFunction = launchFunction;
          this.waitAccept = waitAccept || false;
          this.useLocalStorage = useLocalStorage || false;
          this.init();
        };
        CookiesEuBanner.prototype = {
          init: function () {
            // Detect if the visitor is a bot or not prevent for search engine take the cookie alert message as main content of the page
            var isBot = this.bots.test(navigator.userAgent);
            // Check if DoNotTrack is activated
            var dnt = navigator.doNotTrack || navigator.msDoNotTrack || window.doNotTrack;
            var isToTrack = (dnt !== null && dnt !== undefined) ? (dnt && dnt !== 'yes' && dnt !== 1 && dnt !== '1') : true;
            // Do nothing if it is a bot or if DoNotTrack is activated
            if (isBot || !isToTrack || this.hasConsent() === false) {
              this.removeBanner(0);
              return false;
            }
            // User has already consent to use cookies to tracking
            if (this.hasConsent() === true) {
              // Launch user custom function
              this.launchFunction();
              return true;
            }
            // If it's not a bot, no DoNotTrack and not already accept, so show banner
            this.showBanner();
            if (!this.waitAccept) {
              // Accept cookies by default for the next page
              this.setConsent(true);
            }
          },
          // Show banner at the top of the page
          showBanner: function () {
            var _this = this,
              getElementById = document.getElementById.bind(document),
              banner = getElementById('cookies-eu-banner'),
              rejectButton = getElementById('cookies-eu-reject'),
              acceptButton = getElementById('cookies-eu-accept'),
              moreLink = getElementById('cookies-eu-more'),
              waitRemove = (banner.dataset.waitRemove === undefined) ? 0 : parseInt(banner.dataset.waitRemove),
              // Variables for minification optimization
              addClickListener = this.addClickListener,
              removeBanner = _this.removeBanner.bind(_this, waitRemove);
            banner.style.display = 'flex';

            if (moreLink) {
              addClickListener(moreLink, function () {
                _this.deleteCookie(_this.cookieName);
              });
            }
            if (acceptButton) {
              addClickListener(acceptButton, function () {
                removeBanner();
                _this.setConsent(true);
                _this.launchFunction();
              });
            }
            if (rejectButton) {
              addClickListener(rejectButton, function () {
                removeBanner();
                _this.setConsent(false);
                // Delete existing tracking cookies
                _this.trackingCookiesNames.map(_this.deleteCookie);
              });
            }
          },
          // Set consent cookie or localStorage
          setConsent: function (consent) {
            if (this.useLocalStorage) {
              return localStorage.setItem(this.cookieName, consent);
            }
            this.setCookie(this.cookieName, consent);
          },
          // Check if user already consent
          hasConsent: function () {
            var cookieName = this.cookieName;
            var isCookieSetTo = function (value) {
              return document.cookie.indexOf(cookieName + '=' + value) > -1 || localStorage.getItem(cookieName) === value;
            };
            if (isCookieSetTo('true')) {
              return true;
            } else if (isCookieSetTo('false')) {
              return false;
            }
            return null;
          },
          // Create/update cookie
          setCookie: function (name, value) {
            var date = new Date();
            date.setTime(date.getTime() + this.cookieTimeout);
            document.cookie = name + '=' + value + ';expires=' + date.toGMTString() + ';path=/';
          },
          // Delete cookie by changing expire
          deleteCookie: function (name) {
            var hostname = document.location.hostname.replace(/^www\./, ''),
              commonSuffix = '; expires=Thu, 01-Jan-1970 00:00:01 GMT; path=/';
            document.cookie = name + '=; domain=.' + hostname + commonSuffix;
            document.cookie = name + '=' + commonSuffix;
          },
          addClickListener: function (DOMElement, callback) {
            if (DOMElement.attachEvent) { // For IE 8 and earlier versions
              return DOMElement.attachEvent('onclick', callback);
            }
            // For all major browsers, except IE 8 and earlier
            DOMElement.addEventListener('click', callback);
          },
          // Delays removal of banner allowing developers to specify their own transition effects
          removeBanner: function (wait) {
            //banner.style.display = 'block';
            document.getElementById('cookies-eu-banner').remove();
          }
        };
        return CookiesEuBanner;
      }));
      new CookiesEuBanner(function () {
        window.dataLayer = window.dataLayer || [];
        function gtag() { dataLayer.push(arguments); }
        gtag('js', new Date());
        gtag('config', 'UA-149255108-1');
      }), true;
    </script>
  </body>
</html>
